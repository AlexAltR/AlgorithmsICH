// Вариант 1 - Амортизационный анализ
// Среднее время на одну операцию за серию
const arr = [85, 7, 41, 9, 5, 42, 86, 13, 20 ];
console.log(arr[0]);


arr.push(3); // O(1)

// [85, 7, 41, 9, 5, 42, 86, 13, 20, 3]

arr.push(5); // O(n)

// [85, 7, 41, 9, 5, 42, 86, 13, 20, 3, 5, _, _, _, _, _, _, _, _, _]

let num = 7;
let num2 = 17;

// Вставка обычно быстрая O(1)
// Иногда вставка дорогая O(n)
// Но в среднем за много вставок - все равно O(1) за одну операцию



// Вариант 1 - Асимптотический анализ
// Сколько максимум времени займет операция
function linearSearch(arr, target) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === target) {
            return i;
        }
    }
    return -1;
}

// В худшем случае O(n)



const arrNew = [];

for (let i = 0; i < 1000; i++) {
    arrNew.push(i);
}

// Допустим, что 10 операций были дорогими - копировали массив
// Остальные 990 операций - быстрые

// В среднем потратим: (10 * n + 990 * 1) / 1000 ~ O(1)




const arrWhy = [5, 9, 8, 7, 1, 3, 4, 6, 9];
console.log(arrWhy.length);

arrWhy.unshift(2); // O(n)
console.log(arrWhy);

